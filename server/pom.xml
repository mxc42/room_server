<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.mxc42.room_server</groupId>
	<artifactId>room_server</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>room_server</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<!-- DEFAULT RASPBERRY PI PROPERTIES -->
		<pi.host>192.168.1.144</pi.host>
		<pi.port>22</pi.port>
		<pi.user>pi</pi.user>
		<pi.password>groundbiker42</pi.password>
		<pi.deployDirectory>/home/pi/testtest</pi.deployDirectory>
		<pi.main.class>com.mxc42.room_server.App</pi.main.class>

	</properties>

	<build>
		<plugins>
			<!-- This plugin will generate JAR MANIFEST file inside the JAR in order 
				to make our applicationeasily runnable -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<mainClass>${pi.main.class}</mainClass>
						</manifest>
					</archive>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
				<executions>
					<execution>
						<id>make-my-jar-with-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!--This plugin will Transfer the executable JAR file to the Pi and runs 
				it -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<!-- ensure the target directory exists on the Raspberry Pi -->
								<sshexec host="${pi.host}" port="${pi.port}"
									username="${pi.user}" password="${pi.password}" trust="true"
									failonerror="false" verbose="true"
									command="mkdir --parents ${pi.deployDirectory}" />

								<!-- copy the JAR file to the Raspberry Pi -->
								<scp
									file="${project.build.directory}/${project.build.finalName}-jar-with-dependencies.jar"
									todir="${pi.user}:${pi.password}@${pi.host}:${pi.deployDirectory}"
									port="${pi.port}" trust="true" verbose="true"
									failonerror="true">
								</scp>

								<!-- run the JAR file on the Raspberry Pi -->
								<sshexec host="${pi.host}" port="${pi.port}"
									username="${pi.user}" password="${pi.password}" trust="true"
									failonerror="false" verbose="true"
									command="java -jar ${pi.deployDirectory}/${project.build.finalName}-jar-with-dependencies.jar" />
							</tasks>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.9.6</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>com.mxc42.room_server.App</mainClass>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
						</manifest>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.5</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.fazecast</groupId>
			<artifactId>jSerialComm</artifactId>
			<version>[2.0.0,3.0.0)</version>
		</dependency>
	</dependencies>

</project>
